<?xml version="1.0" encoding="utf-8" standalone="no"?>
<test-run id="2" testcasecount="9" result="Passed" total="9" passed="9" failed="0" inconclusive="0" skipped="0" asserts="1" engine-version="3.5.0.0" clr-version="4.0.30319.42000" start-time="2016-11-15 16:26:20Z" end-time="2016-11-15 16:26:45Z" duration="25.175399">
  <command-line><![CDATA["C:\QA\QATools\SpecFlowDemo\packages\NUnit.ConsoleRunner.3.5.0\tools\nunit3-console.exe"  "C:\QA\QATools\SpecFlowDemo\SpecFlowDemo\bin\Release\SpecFlowDemo.dll" --work "C:\QA\QATools\SpecFlowDemo\test-results" --result TestResult.xml --output "output.txt" --err "error.txt" --labels=All]]></command-line>
  <test-suite type="Assembly" id="0-1014" name="SpecFlowDemo.dll" fullname="C:\QA\QATools\SpecFlowDemo\SpecFlowDemo\bin\Release\SpecFlowDemo.dll" runstate="Runnable" testcasecount="9" result="Passed" start-time="2016-11-15 16:26:20Z" end-time="2016-11-15 16:26:45Z" duration="25.123545" total="9" passed="9" failed="0" inconclusive="0" skipped="0" asserts="1">
    <environment framework-version="3.5.0.0" clr-version="4.0.30319.42000" os-version="Microsoft Windows NT 6.1.7601 Service Pack 1" platform="Win32NT" cwd="C:\QA\QATools\SpecFlowDemo\test-results" machine-name="LIRAZ-WIN7P" user="liraz.s" user-domain="ECB" culture="en-US" uiculture="en-US" os-architecture="x64" />
    <settings>
      <setting name="DisposeRunners" value="True" />
      <setting name="WorkDirectory" value="C:\QA\QATools\SpecFlowDemo\test-results" />
      <setting name="ImageRuntimeVersion" value="4.0.30319" />
      <setting name="ImageTargetFrameworkName" value=".NETFramework,Version=v4.5.2" />
      <setting name="ImageRequiresX86" value="False" />
      <setting name="ImageRequiresDefaultAppDomainAssemblyResolver" value="False" />
      <setting name="NumberOfTestWorkers" value="4" />
    </settings>
    <properties>
      <property name="ParallelScope" value="Fixtures" />
      <property name="LevelOfParallelism" value="4" />
      <property name="_PID" value="4748" />
      <property name="_APPDOMAIN" value="test-domain-" />
    </properties>
    <test-suite type="TestSuite" id="0-1015" name="SpecFlowDemo" fullname="SpecFlowDemo" runstate="Runnable" testcasecount="9" result="Passed" start-time="2016-11-15 16:26:20Z" end-time="2016-11-15 16:26:45Z" duration="25.101176" total="9" passed="9" failed="0" inconclusive="0" skipped="0" asserts="1">
      <test-suite type="TestSuite" id="0-1016" name="Features" fullname="SpecFlowDemo.Features" runstate="Runnable" testcasecount="9" result="Passed" start-time="2016-11-15 16:26:20Z" end-time="2016-11-15 16:26:45Z" duration="25.099364" total="9" passed="9" failed="0" inconclusive="0" skipped="0" asserts="1">
        <test-suite type="TestSuite" id="0-1017" name="Login" fullname="SpecFlowDemo.Features.Login" runstate="Runnable" testcasecount="5" result="Passed" start-time="2016-11-15 16:26:20Z" end-time="2016-11-15 16:26:43Z" duration="23.090081" total="5" passed="5" failed="0" inconclusive="0" skipped="0" asserts="0">
          <test-suite type="TestFixture" id="0-1003" name="LoginExpectingFailureFeature" fullname="SpecFlowDemo.Features.Login.LoginExpectingFailureFeature" classname="SpecFlowDemo.Features.Login.LoginExpectingFailureFeature" runstate="Runnable" testcasecount="1" result="Passed" start-time="2016-11-15 16:26:20Z" end-time="2016-11-15 16:26:29Z" duration="8.737577" total="1" passed="1" failed="0" inconclusive="0" skipped="0" asserts="0">
            <properties>
              <property name="Description" value="Login expecting failure" />
              <property name="Category" value="Login" />
            </properties>
            <test-case id="0-1004" name="UserShouldNotLoginWithInvalidPassword" fullname="SpecFlowDemo.Features.Login.LoginExpectingFailureFeature.UserShouldNotLoginWithInvalidPassword" methodname="UserShouldNotLoginWithInvalidPassword" classname="SpecFlowDemo.Features.Login.LoginExpectingFailureFeature" runstate="Runnable" seed="1583576269" result="Passed" start-time="2016-11-15 16:26:21Z" end-time="2016-11-15 16:26:29Z" duration="8.374004" asserts="0">
              <properties>
                <property name="Description" value="User should not login with invalid password" />
              </properties>
              <output><![CDATA[Given I am in the login page
-> done.
When I fill the email address with "SpecFlowDemo"
-> done.
When I fill the password with "wrong password"
-> done.
When I click Sign in
-> done.
Then I should see an error message "Incorrect username or password."
-> done.
]]></output>
            </test-case>
          </test-suite>
          <test-suite type="TestFixture" id="0-1000" name="LinksFromTheLoginPageFeature" fullname="SpecFlowDemo.Features.Login.LinksFromTheLoginPageFeature" classname="SpecFlowDemo.Features.Login.LinksFromTheLoginPageFeature" runstate="Runnable" testcasecount="2" result="Passed" start-time="2016-11-15 16:26:20Z" end-time="2016-11-15 16:26:36Z" duration="15.268978" total="2" passed="2" failed="0" inconclusive="0" skipped="0" asserts="0">
            <properties>
              <property name="Description" value="Links from the login page" />
              <property name="Category" value="Login" />
            </properties>
            <test-case id="0-1002" name="UserCanGoToCreateAnAccountPageFromTheLoginPage" fullname="SpecFlowDemo.Features.Login.LinksFromTheLoginPageFeature.UserCanGoToCreateAnAccountPageFromTheLoginPage" methodname="UserCanGoToCreateAnAccountPageFromTheLoginPage" classname="SpecFlowDemo.Features.Login.LinksFromTheLoginPageFeature" runstate="Runnable" seed="1706620261" result="Passed" start-time="2016-11-15 16:26:21Z" end-time="2016-11-15 16:26:29Z" duration="8.151486" asserts="0">
              <properties>
                <property name="Description" value="User can go to create an account page from the login page" />
              </properties>
              <output><![CDATA[Given I am in the login page
-> done.
When I click create an account
-> done.
Then I should see the create personal account page
-> done.
]]></output>
            </test-case>
            <test-case id="0-1001" name="UserCanGoToResetPasswordFromTheLoginPage" fullname="SpecFlowDemo.Features.Login.LinksFromTheLoginPageFeature.UserCanGoToResetPasswordFromTheLoginPage" methodname="UserCanGoToResetPasswordFromTheLoginPage" classname="SpecFlowDemo.Features.Login.LinksFromTheLoginPageFeature" runstate="Runnable" seed="573939184" result="Passed" start-time="2016-11-15 16:26:29Z" end-time="2016-11-15 16:26:36Z" duration="6.749161" asserts="0">
              <properties>
                <property name="Description" value="User can go to reset password from the login page" />
              </properties>
              <output><![CDATA[Given I am in the login page
-> done.
When I click Forgot password?
-> done.
Then I should see the reset password page
-> done.
]]></output>
            </test-case>
          </test-suite>
          <test-suite type="TestFixture" id="0-1005" name="LoginSuccessFeature" fullname="SpecFlowDemo.Features.Login.LoginSuccessFeature" classname="SpecFlowDemo.Features.Login.LoginSuccessFeature" runstate="Runnable" testcasecount="2" result="Passed" start-time="2016-11-15 16:26:29Z" end-time="2016-11-15 16:26:43Z" duration="14.345346" total="2" passed="2" failed="0" inconclusive="0" skipped="0" asserts="0">
            <properties>
              <property name="Description" value="Login success" />
              <property name="Category" value="Login" />
            </properties>
            <test-case id="0-1006" name="UserCanLoginByEmailAddress" fullname="SpecFlowDemo.Features.Login.LoginSuccessFeature.UserCanLoginByEmailAddress" methodname="UserCanLoginByEmailAddress" classname="SpecFlowDemo.Features.Login.LoginSuccessFeature" runstate="Runnable" seed="1694333339" result="Passed" start-time="2016-11-15 16:26:29Z" end-time="2016-11-15 16:26:36Z" duration="7.135885" asserts="0">
              <properties>
                <property name="Description" value="User can login by email address" />
              </properties>
              <output><![CDATA[Given I am in the login page
-> done.
When I fill the email address with "SpecFlowDemo@sharklasers.com"
-> done.
When I fill the password with "SpecFlowDemo@sharklasers.com"
-> done.
When I click Sign in
-> done.
Then I should see the dashboard
-> done.
]]></output>
            </test-case>
            <test-case id="0-1007" name="UserCanLoginByUsername" fullname="SpecFlowDemo.Features.Login.LoginSuccessFeature.UserCanLoginByUsername" methodname="UserCanLoginByUsername" classname="SpecFlowDemo.Features.Login.LoginSuccessFeature" runstate="Runnable" seed="243979497" result="Passed" start-time="2016-11-15 16:26:36Z" end-time="2016-11-15 16:26:43Z" duration="7.203537" asserts="0">
              <properties>
                <property name="Description" value="User can login by username" />
              </properties>
              <output><![CDATA[Given I am in the login page
-> done.
When I fill the username with "SpecFlowDemo"
-> done.
When I fill the password with "SpecFlowDemo@sharklasers.com"
-> done.
When I click Sign in
-> done.
Then I should see the dashboard
-> done.
]]></output>
            </test-case>
          </test-suite>
        </test-suite>
        <test-suite type="TestSuite" id="0-1018" name="Dashboard" fullname="SpecFlowDemo.Features.Dashboard" runstate="Runnable" testcasecount="4" result="Passed" start-time="2016-11-15 16:26:20Z" end-time="2016-11-15 16:26:45Z" duration="25.097211" total="4" passed="4" failed="0" inconclusive="0" skipped="0" asserts="1">
          <test-suite type="TestFixture" id="0-1012" name="LinksFromTheDashboardFeature" fullname="SpecFlowDemo.Features.Dashboard.LinksFromTheDashboardFeature" classname="SpecFlowDemo.Features.Dashboard.LinksFromTheDashboardFeature" runstate="Runnable" testcasecount="1" result="Passed" start-time="2016-11-15 16:26:20Z" end-time="2016-11-15 16:26:31Z" duration="10.623424" total="1" passed="1" failed="0" inconclusive="0" skipped="0" asserts="0">
            <properties>
              <property name="Description" value="Links from the dashboard" />
              <property name="Category" value="Dashboard" />
            </properties>
            <test-case id="0-1013" name="UserCanExploreGitHubFromTheDashboard" fullname="SpecFlowDemo.Features.Dashboard.LinksFromTheDashboardFeature.UserCanExploreGitHubFromTheDashboard" methodname="UserCanExploreGitHubFromTheDashboard" classname="SpecFlowDemo.Features.Dashboard.LinksFromTheDashboardFeature" runstate="Runnable" seed="507834020" result="Passed" start-time="2016-11-15 16:26:21Z" end-time="2016-11-15 16:26:31Z" duration="10.257963" asserts="0">
              <properties>
                <property name="Description" value="User can explore GitHub from the dashboard" />
              </properties>
              <output><![CDATA[#11: Given I am in the dashboard
#8: Given I am in the login page
#9: Given I am in the login page
#10: Given I am in the dashboard
-> #9: done: LoginPageSteps.GivenIAmInTheLoginPage() (3.2s)
#9: When I click create an account
-> #8: done: LoginPageSteps.GivenIAmInTheLoginPage() (3.3s)
#8: When I fill the email address with "SpecFlowDemo"
-> #8: done: LoginPageSteps.WhenIFillTheEmailOrUsernameWith("SpecFlowDemo") (0.1s)
#8: And I fill the password with "wrong password"
-> #8: done: LoginPageSteps.WhenIFillThePasswordWith("wrong password") (0.1s)
#8: And I click Sign in
-> #9: done: LoginPageSteps.WhenIClickCreateAnAccount() (0.9s)
#9: Then I should see the create personal account page
-> #9: done: CreatePersonalAccountSteps.ThenIShouldSeeTheCreatePersonalAccountPage() (0.0s)
-> #8: done: LoginPageSteps.WhenIClickSignIn() (0.8s)
#8: Then I should see an error message "Incorrect username or password."
-> #8: done: LoginPageSteps.ThenIShouldSeeAnErrorMessage("Incorrect usernam...") (0.1s)
Given I am in the dashboard
-> done.
-> #11: done: DashboardSteps.GivenIAmInTheDashboard() (4.6s)
#11: When I click Explore GitHub
-> #10: done: DashboardSteps.GivenIAmInTheDashboard() (4.6s)
#10: When I click New repository
-> #10: done: DashboardSteps.WhenIClickNewRepository() (1.1s)
#10: Then I should see the create a new repository page
-> #10: done: CreateRepositorySteps.ThenIShouldSeeTheCreateANewRepositoryPage() (0.0s)
-> #11: done: DashboardSteps.WhenIClickExploreGitHub() (1.5s)
When I click Explore GitHub
-> done.
#11: Then I should see the Project showcases page
Then I should see the Project showcases page
-> done.
-> #11: done: ExploreGitHubSteps.ThenIShouldSeeTheProjectShowcasesPage() (0.0s)
#9: Given I am in the login page
#8: Given I am in the login page
#10: Given I am in the dashboard
-> #9: done: LoginPageSteps.GivenIAmInTheLoginPage() (2.8s)
#9: When I click Forgot password?
-> #8: done: LoginPageSteps.GivenIAmInTheLoginPage() (2.9s)
#8: When I fill the email address with "SpecFlowDemo@sharklasers.com"
-> #8: done: LoginPageSteps.WhenIFillTheEmailOrUsernameWith("SpecFlowDemo@shar...") (0.1s)
#8: And I fill the password with "SpecFlowDemo@sharklasers.com"
-> #8: done: LoginPageSteps.WhenIFillThePasswordWith("SpecFlowDemo@shar...") (0.1s)
#8: And I click Sign in
-> #9: done: LoginPageSteps.WhenIClickForgotPassword() (0.7s)
#9: Then I should see the reset password page
-> #9: done: ResetPasswordSteps.ThenIShouldSeeTheResetPasswordPage() (0.0s)
-> #8: done: LoginPageSteps.WhenIClickSignIn() (0.9s)
#8: Then I should see the dashboard
-> #8: done: DashboardSteps.ThenIShouldSeeTheDashboard() (0.0s)
-> #10: done: DashboardSteps.GivenIAmInTheDashboard() (4.2s)
#10: When I click the first repository
-> #10: done: DashboardSteps.WhenIClickTheFirstRepository() (0.9s)
#10: Then I should see the repository code page
-> #10: done: RepositorySteps.ThenIShouldSeeTheRepositoryCodePage() (0.0s)
#8: Given I am in the login page
#10: Given I am in the dashboard
-> #8: done: LoginPageSteps.GivenIAmInTheLoginPage() (3.0s)
#8: When I fill the username with "SpecFlowDemo"
-> #8: done: LoginPageSteps.WhenIFillTheEmailOrUsernameWith("SpecFlowDemo") (0.1s)
#8: And I fill the password with "SpecFlowDemo@sharklasers.com"
-> #8: done: LoginPageSteps.WhenIFillThePasswordWith("SpecFlowDemo@shar...") (0.1s)
#8: And I click Sign in
-> #8: done: LoginPageSteps.WhenIClickSignIn() (1.0s)
#8: Then I should see the dashboard
-> #8: done: DashboardSteps.ThenIShouldSeeTheDashboard() (0.0s)
-> #10: done: DashboardSteps.GivenIAmInTheDashboard() (4.0s)
#10: Then I should see my repositories
-> #10: done: DashboardSteps.ThenIShouldSeeMyRepositories() (0.1s)
]]></output>
            </test-case>
          </test-suite>
          <test-suite type="TestFixture" id="0-1008" name="SeeMyRepositoriesInTheDashboardFeature" fullname="SpecFlowDemo.Features.Dashboard.SeeMyRepositoriesInTheDashboardFeature" classname="SpecFlowDemo.Features.Dashboard.SeeMyRepositoriesInTheDashboardFeature" runstate="Runnable" testcasecount="3" result="Passed" start-time="2016-11-15 16:26:20Z" end-time="2016-11-15 16:26:45Z" duration="25.094406" total="3" passed="3" failed="0" inconclusive="0" skipped="0" asserts="1">
            <properties>
              <property name="Description" value="See my repositories in the dashboard" />
              <property name="Category" value="Dashboard" />
            </properties>
            <test-case id="0-1009" name="UserCanCreateNewRepositoryFromTheDashboard" fullname="SpecFlowDemo.Features.Dashboard.SeeMyRepositoriesInTheDashboardFeature.UserCanCreateNewRepositoryFromTheDashboard" methodname="UserCanCreateNewRepositoryFromTheDashboard" classname="SpecFlowDemo.Features.Dashboard.SeeMyRepositoriesInTheDashboardFeature" runstate="Runnable" seed="536336702" result="Passed" start-time="2016-11-15 16:26:21Z" end-time="2016-11-15 16:26:31Z" duration="9.835358" asserts="0">
              <properties>
                <property name="Description" value="User can create new repository from the dashboard" />
              </properties>
              <output><![CDATA[Given I am in the dashboard
-> done.
When I click New repository
-> done.
Then I should see the create a new repository page
-> done.
]]></output>
            </test-case>
            <test-case id="0-1011" name="UserWillCanGoToRepositoryFromTheDashboard" fullname="SpecFlowDemo.Features.Dashboard.SeeMyRepositoriesInTheDashboardFeature.UserWillCanGoToRepositoryFromTheDashboard" methodname="UserWillCanGoToRepositoryFromTheDashboard" classname="SpecFlowDemo.Features.Dashboard.SeeMyRepositoriesInTheDashboardFeature" runstate="Runnable" seed="1234595402" result="Passed" start-time="2016-11-15 16:26:31Z" end-time="2016-11-15 16:26:39Z" duration="7.944200" asserts="0">
              <properties>
                <property name="Description" value="User will can go to repository from the dashboard" />
              </properties>
              <output><![CDATA[Given I am in the dashboard
-> done.
When I click the first repository
-> done.
Then I should see the repository code page
-> done.
]]></output>
            </test-case>
            <test-case id="0-1010" name="UserWillSeeHisRepositoriesInTheDashboard" fullname="SpecFlowDemo.Features.Dashboard.SeeMyRepositoriesInTheDashboardFeature.UserWillSeeHisRepositoriesInTheDashboard" methodname="UserWillSeeHisRepositoriesInTheDashboard" classname="SpecFlowDemo.Features.Dashboard.SeeMyRepositoriesInTheDashboardFeature" runstate="Runnable" seed="395027536" result="Passed" start-time="2016-11-15 16:26:39Z" end-time="2016-11-15 16:26:45Z" duration="6.939964" asserts="1">
              <properties>
                <property name="Description" value="User will see his repositories in the dashboard" />
              </properties>
              <output><![CDATA[Given I am in the dashboard
-> done.
Then I should see my repositories
-> done.
]]></output>
            </test-case>
          </test-suite>
        </test-suite>
      </test-suite>
    </test-suite>
  </test-suite>
</test-run>